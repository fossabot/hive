// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package go_proto

import (
	"context"
	"fmt"
	"github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x5c, 0x29, 0xa9, 0x69, 0xc5, 0x10,
	0x21, 0xa3, 0x4f, 0x4c, 0x5c, 0xcc, 0x89, 0x05, 0x99, 0x42, 0x3a, 0x5c, 0x3c, 0x41, 0xf9, 0xf9,
	0xb9, 0x3e, 0x99, 0xc5, 0x25, 0xa9, 0x79, 0xa9, 0x45, 0x42, 0xbc, 0x10, 0x79, 0x3d, 0x88, 0x80,
	0x14, 0x37, 0x94, 0x0b, 0x52, 0x63, 0xc0, 0x28, 0xa4, 0xcd, 0xc5, 0x81, 0x4b, 0x25, 0x1f, 0x94,
	0xeb, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x6a, 0xc0, 0x28, 0x64, 0xc4, 0x25, 0xe0, 0x54, 0x94,
	0x9f, 0x98, 0x92, 0x9c, 0x58, 0x5c, 0x02, 0x15, 0x15, 0x42, 0x53, 0x25, 0xc5, 0x03, 0xe5, 0xbb,
	0xe6, 0x16, 0x94, 0x54, 0x6a, 0x30, 0x0a, 0x69, 0x70, 0x71, 0x04, 0xa5, 0xa6, 0x83, 0x4c, 0x2c,
	0x82, 0xab, 0xf5, 0x4b, 0x2d, 0x0f, 0x2d, 0x4e, 0x2d, 0x42, 0x55, 0x2b, 0xa4, 0xcf, 0xc5, 0x15,
	0x9a, 0x57, 0x04, 0x53, 0x2b, 0x0c, 0x73, 0x4c, 0x7e, 0x7a, 0x66, 0x5e, 0x50, 0x6a, 0x61, 0x69,
	0x6a, 0x71, 0x09, 0x9a, 0x06, 0x4d, 0x2e, 0x56, 0xb0, 0x2c, 0x76, 0xb5, 0x30, 0x8f, 0x82, 0x6c,
	0x12, 0x52, 0xe1, 0x62, 0xf3, 0xcc, 0xcb, 0x2c, 0x71, 0x49, 0x12, 0x42, 0x31, 0x02, 0xcd, 0x40,
	0x03, 0x2e, 0x4e, 0x8f, 0xc4, 0xbc, 0x94, 0xe2, 0x8c, 0xc4, 0xec, 0x54, 0xb8, 0xa1, 0x70, 0x91,
	0xa0, 0xd4, 0x42, 0x78, 0x98, 0x84, 0xa7, 0xe6, 0x24, 0xe7, 0xe7, 0xa6, 0x3a, 0x49, 0x9c, 0x78,
	0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c,
	0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x58, 0xa1, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xba, 0x25, 0xc5, 0xc8, 0xb5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	RoomListener(ctx context.Context, in *Listen, opts ...grpc.CallOption) (Api_RoomListenerClient, error)
	Listener(ctx context.Context, in *Listen, opts ...grpc.CallOption) (Api_ListenerClient, error)
	BroadcastMessage(ctx context.Context, opts ...grpc.CallOption) (Api_BroadcastMessageClient, error)
	Register(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Empty, error)
	Unregister(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error)
	InitDb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Handshake(ctx context.Context, in *HandshakeReq, opts ...grpc.CallOption) (*Welcome, error)
}

type apiClient struct {
	cc *grpc.ClientConn
}

func NewApiClient(cc *grpc.ClientConn) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) RoomListener(ctx context.Context, in *Listen, opts ...grpc.CallOption) (Api_RoomListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/proto.api/RoomListener", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiRoomListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_RoomListenerClient interface {
	Recv() (*Room, error)
	grpc.ClientStream
}

type apiRoomListenerClient struct {
	grpc.ClientStream
}

func (x *apiRoomListenerClient) Recv() (*Room, error) {
	m := new(Room)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) Listener(ctx context.Context, in *Listen, opts ...grpc.CallOption) (Api_ListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[1], "/proto.api/Listener", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_ListenerClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type apiListenerClient struct {
	grpc.ClientStream
}

func (x *apiListenerClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) BroadcastMessage(ctx context.Context, opts ...grpc.CallOption) (Api_BroadcastMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[2], "/proto.api/BroadcastMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiBroadcastMessageClient{stream}
	return x, nil
}

type Api_BroadcastMessageClient interface {
	Send(*Message) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type apiBroadcastMessageClient struct {
	grpc.ClientStream
}

func (x *apiBroadcastMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiBroadcastMessageClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) Register(ctx context.Context, in *NewUser, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.api/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Unregister(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.api/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/proto.api/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) InitDb(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.api/InitDb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Handshake(ctx context.Context, in *HandshakeReq, opts ...grpc.CallOption) (*Welcome, error) {
	out := new(Welcome)
	err := c.cc.Invoke(ctx, "/proto.api/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	RoomListener(*Listen, Api_RoomListenerServer) error
	Listener(*Listen, Api_ListenerServer) error
	BroadcastMessage(Api_BroadcastMessageServer) error
	Register(context.Context, *NewUser) (*Empty, error)
	Unregister(context.Context, *LoginRequest) (*Empty, error)
	Login(context.Context, *LoginRequest) (*User, error)
	InitDb(context.Context, *Empty) (*Empty, error)
	Handshake(context.Context, *HandshakeReq) (*Welcome, error)
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) RoomListener(req *Listen, srv Api_RoomListenerServer) error {
	return status.Errorf(codes.Unimplemented, "method RoomListener not implemented")
}
func (*UnimplementedApiServer) Listener(req *Listen, srv Api_ListenerServer) error {
	return status.Errorf(codes.Unimplemented, "method Listener not implemented")
}
func (*UnimplementedApiServer) BroadcastMessage(srv Api_BroadcastMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (*UnimplementedApiServer) Register(ctx context.Context, req *NewUser) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedApiServer) Unregister(ctx context.Context, req *LoginRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (*UnimplementedApiServer) Login(ctx context.Context, req *LoginRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedApiServer) InitDb(ctx context.Context, req *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitDb not implemented")
}
func (*UnimplementedApiServer) Handshake(ctx context.Context, req *HandshakeReq) (*Welcome, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_RoomListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Listen)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).RoomListener(m, &apiRoomListenerServer{stream})
}

type Api_RoomListenerServer interface {
	Send(*Room) error
	grpc.ServerStream
}

type apiRoomListenerServer struct {
	grpc.ServerStream
}

func (x *apiRoomListenerServer) Send(m *Room) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_Listener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Listen)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).Listener(m, &apiListenerServer{stream})
}

type Api_ListenerServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type apiListenerServer struct {
	grpc.ServerStream
}

func (x *apiListenerServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_BroadcastMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).BroadcastMessage(&apiBroadcastMessageServer{stream})
}

type Api_BroadcastMessageServer interface {
	SendAndClose(*Empty) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type apiBroadcastMessageServer struct {
	grpc.ServerStream
}

func (x *apiBroadcastMessageServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiBroadcastMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Register(ctx, req.(*NewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Unregister(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_InitDb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).InitDb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api/InitDb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).InitDb(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Handshake(ctx, req.(*HandshakeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Api_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Api_Unregister_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Api_Login_Handler,
		},
		{
			MethodName: "InitDb",
			Handler:    _Api_InitDb_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _Api_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RoomListener",
			Handler:       _Api_RoomListener_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listener",
			Handler:       _Api_Listener_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BroadcastMessage",
			Handler:       _Api_BroadcastMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
