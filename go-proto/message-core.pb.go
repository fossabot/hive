// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message-core.proto

package go_proto

import (
	"context"
	"fmt"
	"github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("message-core.proto", fileDescriptor_dafde4ec856d1468) }

var fileDescriptor_dafde4ec856d1468 = []byte{
	// 133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xca, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x4d, 0xce, 0x2f, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x05, 0x53, 0x52, 0x5c, 0x29, 0xa9, 0x69, 0xc5, 0x10, 0x21, 0x23, 0x57, 0x2e, 0x6e, 0xa8, 0x42,
	0xe7, 0xfc, 0xa2, 0x54, 0x21, 0x33, 0x2e, 0x81, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0xdc, 0xcc, 0xbc,
	0x74, 0xe7, 0x8c, 0xc4, 0xbc, 0xbc, 0xd4, 0x1c, 0x21, 0x3e, 0x88, 0x52, 0x3d, 0x5f, 0x88, 0x3a,
	0x29, 0x34, 0xbe, 0x06, 0xa3, 0x01, 0xa3, 0x93, 0xc4, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x24, 0xb1, 0x81, 0x15, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x86, 0x19, 0x85,
	0x8f, 0x90, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessageCoreClient is the client API for MessageCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageCoreClient interface {
	StreamingChannel(ctx context.Context, opts ...grpc.CallOption) (MessageCore_StreamingChannelClient, error)
}

type messageCoreClient struct {
	cc *grpc.ClientConn
}

func NewMessageCoreClient(cc *grpc.ClientConn) MessageCoreClient {
	return &messageCoreClient{cc}
}

func (c *messageCoreClient) StreamingChannel(ctx context.Context, opts ...grpc.CallOption) (MessageCore_StreamingChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageCore_serviceDesc.Streams[0], "/proto.messageCore/StreamingChannel", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageCoreStreamingChannelClient{stream}
	return x, nil
}

type MessageCore_StreamingChannelClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageCoreStreamingChannelClient struct {
	grpc.ClientStream
}

func (x *messageCoreStreamingChannelClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageCoreStreamingChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageCoreServer is the server API for MessageCore service.
type MessageCoreServer interface {
	StreamingChannel(MessageCore_StreamingChannelServer) error
}

// UnimplementedMessageCoreServer can be embedded to have forward compatible implementations.
type UnimplementedMessageCoreServer struct {
}

func (*UnimplementedMessageCoreServer) StreamingChannel(srv MessageCore_StreamingChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingChannel not implemented")
}

func RegisterMessageCoreServer(s *grpc.Server, srv MessageCoreServer) {
	s.RegisterService(&_MessageCore_serviceDesc, srv)
}

func _MessageCore_StreamingChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageCoreServer).StreamingChannel(&messageCoreStreamingChannelServer{stream})
}

type MessageCore_StreamingChannelServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messageCoreStreamingChannelServer struct {
	grpc.ServerStream
}

func (x *messageCoreStreamingChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageCoreStreamingChannelServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageCore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.messageCore",
	HandlerType: (*MessageCoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingChannel",
			Handler:       _MessageCore_StreamingChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message-core.proto",
}
