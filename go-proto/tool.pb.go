// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tool.proto

package go_proto

import (
	"context"
	"fmt"
	"github.com/gogo/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"io"
	"math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UserToOwner struct {
	From    string `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To      string `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *UserToOwner) Reset()         { *m = UserToOwner{} }
func (m *UserToOwner) String() string { return proto.CompactTextString(m) }
func (*UserToOwner) ProtoMessage()    {}
func (*UserToOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_34355de42c73af60, []int{0}
}
func (m *UserToOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserToOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserToOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserToOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserToOwner.Merge(m, src)
}
func (m *UserToOwner) XXX_Size() int {
	return m.Size()
}
func (m *UserToOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_UserToOwner.DiscardUnknown(m)
}

var xxx_messageInfo_UserToOwner proto.InternalMessageInfo

func (m *UserToOwner) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *UserToOwner) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *UserToOwner) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UserId struct {
	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (m *UserId) Reset()         { *m = UserId{} }
func (m *UserId) String() string { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()    {}
func (*UserId) Descriptor() ([]byte, []int) {
	return fileDescriptor_34355de42c73af60, []int{1}
}
func (m *UserId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserId.Merge(m, src)
}
func (m *UserId) XXX_Size() int {
	return m.Size()
}
func (m *UserId) XXX_DiscardUnknown() {
	xxx_messageInfo_UserId.DiscardUnknown(m)
}

var xxx_messageInfo_UserId proto.InternalMessageInfo

func (m *UserId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*UserToOwner)(nil), "proto.UserToOwner")
	proto.RegisterType((*UserId)(nil), "proto.UserId")
}

func init() { proto.RegisterFile("tool.proto", fileDescriptor_34355de42c73af60) }

var fileDescriptor_34355de42c73af60 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0xcf, 0xcf,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x5c, 0x29, 0xa9, 0x69, 0xc5,
	0x10, 0x21, 0x25, 0x6f, 0x2e, 0xee, 0xd0, 0xe2, 0xd4, 0xa2, 0x90, 0x7c, 0xff, 0xf2, 0xbc, 0xd4,
	0x22, 0x21, 0x21, 0x2e, 0x16, 0xb7, 0xa2, 0xfc, 0x5c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x30, 0x5b, 0x88, 0x8f, 0x8b, 0x29, 0x24, 0x5f, 0x82, 0x09, 0x2c, 0xc2, 0x14, 0x92, 0x2f, 0x24,
	0xc1, 0xc5, 0xee, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a, 0xc1, 0x0c, 0x16, 0x84, 0x71, 0x95,
	0x24, 0xb8, 0xd8, 0x40, 0x86, 0x79, 0xa6, 0x80, 0xf4, 0x78, 0xa6, 0x40, 0x4d, 0x61, 0xf2, 0x4c,
	0x31, 0xca, 0xe2, 0x62, 0x01, 0xb9, 0x43, 0x48, 0x9f, 0x8b, 0x27, 0x24, 0x3f, 0x3f, 0xc7, 0x27,
	0xb3, 0xb8, 0x24, 0x15, 0x64, 0x1f, 0x2f, 0xc4, 0x19, 0x7a, 0x10, 0x6d, 0x52, 0x7c, 0x50, 0x2e,
	0xd4, 0x40, 0x03, 0x46, 0x21, 0x43, 0x2e, 0x5e, 0x90, 0x06, 0xa7, 0xa2, 0xfc, 0xc4, 0x94, 0xe4,
	0xc4, 0xe2, 0x12, 0x21, 0x21, 0x24, 0x1d, 0x50, 0x57, 0x4b, 0xf1, 0x40, 0xc5, 0x5c, 0x73, 0x0b,
	0x4a, 0x2a, 0x9d, 0x24, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x89, 0x0d,
	0xac, 0xcc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xc9, 0x10, 0x7e, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ToolClient is the client API for Tool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ToolClient interface {
	ToolListener(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Tool_ToolListenerClient, error)
	ToolBroadcast(ctx context.Context, in *UserToOwner, opts ...grpc.CallOption) (*Empty, error)
}

type toolClient struct {
	cc *grpc.ClientConn
}

func NewToolClient(cc *grpc.ClientConn) ToolClient {
	return &toolClient{cc}
}

func (c *toolClient) ToolListener(ctx context.Context, in *UserId, opts ...grpc.CallOption) (Tool_ToolListenerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tool_serviceDesc.Streams[0], "/proto.tool/ToolListener", opts...)
	if err != nil {
		return nil, err
	}
	x := &toolToolListenerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tool_ToolListenerClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type toolToolListenerClient struct {
	grpc.ClientStream
}

func (x *toolToolListenerClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *toolClient) ToolBroadcast(ctx context.Context, in *UserToOwner, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.tool/ToolBroadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToolServer is the server API for Tool service.
type ToolServer interface {
	ToolListener(*UserId, Tool_ToolListenerServer) error
	ToolBroadcast(context.Context, *UserToOwner) (*Empty, error)
}

// UnimplementedToolServer can be embedded to have forward compatible implementations.
type UnimplementedToolServer struct {
}

func (*UnimplementedToolServer) ToolListener(req *UserId, srv Tool_ToolListenerServer) error {
	return status.Errorf(codes.Unimplemented, "method ToolListener not implemented")
}
func (*UnimplementedToolServer) ToolBroadcast(ctx context.Context, req *UserToOwner) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToolBroadcast not implemented")
}

func RegisterToolServer(s *grpc.Server, srv ToolServer) {
	s.RegisterService(&_Tool_serviceDesc, srv)
}

func _Tool_ToolListener_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToolServer).ToolListener(m, &toolToolListenerServer{stream})
}

type Tool_ToolListenerServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type toolToolListenerServer struct {
	grpc.ServerStream
}

func (x *toolToolListenerServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Tool_ToolBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToolServer).ToolBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.tool/ToolBroadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToolServer).ToolBroadcast(ctx, req.(*UserToOwner))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tool_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.tool",
	HandlerType: (*ToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToolBroadcast",
			Handler:    _Tool_ToolBroadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ToolListener",
			Handler:       _Tool_ToolListener_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tool.proto",
}

func (m *UserToOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserToOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserToOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTool(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTool(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTool(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTool(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTool(dAtA []byte, offset int, v uint64) int {
	offset -= sovTool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserToOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTool(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTool(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTool(uint64(l))
	}
	return n
}

func (m *UserId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTool(uint64(l))
	}
	return n
}

func sovTool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTool(x uint64) (n int) {
	return sovTool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserToOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserToOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserToOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTool
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTool = fmt.Errorf("proto: unexpected end of group")
)
