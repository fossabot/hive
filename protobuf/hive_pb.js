// source: github.com/benka-me/hive/protobuf/hive.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var github_com_gogo_protobuf_gogoproto_gogo_pb = require('../../../../github.com/gogo/protobuf/gogoproto/gogo_pb.js');
goog.object.extend(proto, github_com_gogo_protobuf_gogoproto_gogo_pb);
var github_com_benka$me_cell$user_protobuf_user_pb = require('../../../../github.com/benka-me/cell-user/protobuf/user_pb.js');
goog.object.extend(proto, github_com_benka$me_cell$user_protobuf_user_pb);
goog.exportSymbol('proto.hive.Bee', null, global);
goog.exportSymbol('proto.hive.BeeReq', null, global);
goog.exportSymbol('proto.hive.Bees', null, global);
goog.exportSymbol('proto.hive.BeesReq', null, global);
goog.exportSymbol('proto.hive.CPP', null, global);
goog.exportSymbol('proto.hive.CSharp', null, global);
goog.exportSymbol('proto.hive.Dart', null, global);
goog.exportSymbol('proto.hive.Dep', null, global);
goog.exportSymbol('proto.hive.DevLang', null, global);
goog.exportSymbol('proto.hive.Go', null, global);
goog.exportSymbol('proto.hive.Hive', null, global);
goog.exportSymbol('proto.hive.Java', null, global);
goog.exportSymbol('proto.hive.Javascript', null, global);
goog.exportSymbol('proto.hive.LanguageSetup', null, global);
goog.exportSymbol('proto.hive.Languages', null, global);
goog.exportSymbol('proto.hive.ObjectiveC', null, global);
goog.exportSymbol('proto.hive.PHP', null, global);
goog.exportSymbol('proto.hive.PushBee', null, global);
goog.exportSymbol('proto.hive.PushBeeRes', null, global);
goog.exportSymbol('proto.hive.PushHive', null, global);
goog.exportSymbol('proto.hive.PushHiveRes', null, global);
goog.exportSymbol('proto.hive.Python', null, global);
goog.exportSymbol('proto.hive.Ruby', null, global);
goog.exportSymbol('proto.hive.Version', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Version = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Version, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Version.displayName = 'proto.hive.Version';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Bee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hive.Bee.repeatedFields_, null);
};
goog.inherits(proto.hive.Bee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Bee.displayName = 'proto.hive.Bee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Bees = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hive.Bees.repeatedFields_, null);
};
goog.inherits(proto.hive.Bees, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Bees.displayName = 'proto.hive.Bees';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.BeeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.BeeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.BeeReq.displayName = 'proto.hive.BeeReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.BeesReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hive.BeesReq.repeatedFields_, null);
};
goog.inherits(proto.hive.BeesReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.BeesReq.displayName = 'proto.hive.BeesReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Dep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Dep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Dep.displayName = 'proto.hive.Dep';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Hive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Hive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Hive.displayName = 'proto.hive.Hive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Languages = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Languages, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Languages.displayName = 'proto.hive.Languages';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.LanguageSetup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.hive.LanguageSetup.repeatedFields_, null);
};
goog.inherits(proto.hive.LanguageSetup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.LanguageSetup.displayName = 'proto.hive.LanguageSetup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Go = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Go, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Go.displayName = 'proto.hive.Go';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Javascript = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Javascript, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Javascript.displayName = 'proto.hive.Javascript';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Python = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Python, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Python.displayName = 'proto.hive.Python';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Java = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Java, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Java.displayName = 'proto.hive.Java';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.CPP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.CPP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.CPP.displayName = 'proto.hive.CPP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.CSharp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.CSharp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.CSharp.displayName = 'proto.hive.CSharp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.ObjectiveC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.ObjectiveC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.ObjectiveC.displayName = 'proto.hive.ObjectiveC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Ruby = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Ruby, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Ruby.displayName = 'proto.hive.Ruby';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.Dart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.Dart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.Dart.displayName = 'proto.hive.Dart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.PHP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.PHP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.PHP.displayName = 'proto.hive.PHP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.PushBee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.PushBee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.PushBee.displayName = 'proto.hive.PushBee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.PushHive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.PushHive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.PushHive.displayName = 'proto.hive.PushHive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.PushBeeRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.PushBeeRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.PushBeeRes.displayName = 'proto.hive.PushBeeRes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.hive.PushHiveRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.hive.PushHiveRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.hive.PushHiveRes.displayName = 'proto.hive.PushHiveRes';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Version.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Version.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Version} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Version.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mod: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Version}
 */
proto.hive.Version.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Version;
  return proto.hive.Version.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Version} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Version}
 */
proto.hive.Version.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Version.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Version.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Version} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Version.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMod();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 Major = 1;
 * @return {number}
 */
proto.hive.Version.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hive.Version} returns this
 */
proto.hive.Version.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 Minor = 2;
 * @return {number}
 */
proto.hive.Version.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.hive.Version} returns this
 */
proto.hive.Version.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 Mod = 3;
 * @return {number}
 */
proto.hive.Version.prototype.getMod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.hive.Version} returns this
 */
proto.hive.Version.prototype.setMod = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hive.Bee.repeatedFields_ = [16,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Bee.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Bee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Bee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Bee.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkgname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pkgnamecamel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    repo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    author: jspb.Message.getFieldWithDefault(msg, 5, ""),
    authoremail: jspb.Message.getFieldWithDefault(msg, 6, ""),
    port: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pb_public: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    license: jspb.Message.getFieldWithDefault(msg, 9, ""),
    description: jspb.Message.getFieldWithDefault(msg, 10, ""),
    keywords: jspb.Message.getFieldWithDefault(msg, 11, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 12, ""),
    devlang: jspb.Message.getFieldWithDefault(msg, 13, 0),
    languages: (f = msg.getLanguages()) && proto.hive.Languages.toObject(includeInstance, f),
    isgateway: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    depsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    consList: (f = jspb.Message.getRepeatedField(msg, 17)) == null ? undefined : f,
    version: (f = msg.getVersion()) && proto.hive.Version.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Bee}
 */
proto.hive.Bee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Bee;
  return proto.hive.Bee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Bee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Bee}
 */
proto.hive.Bee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgnamecamel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthoremail(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLicense(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeywords(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 13:
      var value = /** @type {!proto.hive.DevLang} */ (reader.readEnum());
      msg.setDevlang(value);
      break;
    case 14:
      var value = new proto.hive.Languages;
      reader.readMessage(value,proto.hive.Languages.deserializeBinaryFromReader);
      msg.setLanguages(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsgateway(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addDeps(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.addCons(value);
      break;
    case 18:
      var value = new proto.hive.Version;
      reader.readMessage(value,proto.hive.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Bee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Bee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Bee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Bee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkgname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPkgnamecamel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRepo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAuthoremail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getPublic();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLicense();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getKeywords();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getDevlang();
  if (f !== 0.0) {
    writer.writeEnum(
      13,
      f
    );
  }
  f = message.getLanguages();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.hive.Languages.serializeBinaryToWriter
    );
  }
  f = message.getIsgateway();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getDepsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getConsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      17,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.hive.Version.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.hive.Bee.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PkgName = 2;
 * @return {string}
 */
proto.hive.Bee.prototype.getPkgname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setPkgname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PkgNameCamel = 3;
 * @return {string}
 */
proto.hive.Bee.prototype.getPkgnamecamel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setPkgnamecamel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Repo = 4;
 * @return {string}
 */
proto.hive.Bee.prototype.getRepo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setRepo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Author = 5;
 * @return {string}
 */
proto.hive.Bee.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string AuthorEmail = 6;
 * @return {string}
 */
proto.hive.Bee.prototype.getAuthoremail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setAuthoremail = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int32 Port = 7;
 * @return {number}
 */
proto.hive.Bee.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool Public = 8;
 * @return {boolean}
 */
proto.hive.Bee.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setPublic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional string License = 9;
 * @return {string}
 */
proto.hive.Bee.prototype.getLicense = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setLicense = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string Description = 10;
 * @return {string}
 */
proto.hive.Bee.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string Keywords = 11;
 * @return {string}
 */
proto.hive.Bee.prototype.getKeywords = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setKeywords = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string Tag = 12;
 * @return {string}
 */
proto.hive.Bee.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional DevLang DevLang = 13;
 * @return {!proto.hive.DevLang}
 */
proto.hive.Bee.prototype.getDevlang = function() {
  return /** @type {!proto.hive.DevLang} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {!proto.hive.DevLang} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setDevlang = function(value) {
  return jspb.Message.setProto3EnumField(this, 13, value);
};


/**
 * optional Languages Languages = 14;
 * @return {?proto.hive.Languages}
 */
proto.hive.Bee.prototype.getLanguages = function() {
  return /** @type{?proto.hive.Languages} */ (
    jspb.Message.getWrapperField(this, proto.hive.Languages, 14));
};


/**
 * @param {?proto.hive.Languages|undefined} value
 * @return {!proto.hive.Bee} returns this
*/
proto.hive.Bee.prototype.setLanguages = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.clearLanguages = function() {
  return this.setLanguages(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Bee.prototype.hasLanguages = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool IsGateway = 15;
 * @return {boolean}
 */
proto.hive.Bee.prototype.getIsgateway = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setIsgateway = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * repeated string Deps = 16;
 * @return {!Array<string>}
 */
proto.hive.Bee.prototype.getDepsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setDepsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.addDeps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.clearDepsList = function() {
  return this.setDepsList([]);
};


/**
 * repeated string Cons = 17;
 * @return {!Array<string>}
 */
proto.hive.Bee.prototype.getConsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 17));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.setConsList = function(value) {
  return jspb.Message.setField(this, 17, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.addCons = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 17, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.clearConsList = function() {
  return this.setConsList([]);
};


/**
 * optional Version Version = 18;
 * @return {?proto.hive.Version}
 */
proto.hive.Bee.prototype.getVersion = function() {
  return /** @type{?proto.hive.Version} */ (
    jspb.Message.getWrapperField(this, proto.hive.Version, 18));
};


/**
 * @param {?proto.hive.Version|undefined} value
 * @return {!proto.hive.Bee} returns this
*/
proto.hive.Bee.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Bee} returns this
 */
proto.hive.Bee.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Bee.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hive.Bees.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Bees.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Bees.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Bees} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Bees.toObject = function(includeInstance, msg) {
  var f, obj = {
    beesList: jspb.Message.toObjectList(msg.getBeesList(),
    proto.hive.Bee.toObject, includeInstance),
    statusmessage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Bees}
 */
proto.hive.Bees.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Bees;
  return proto.hive.Bees.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Bees} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Bees}
 */
proto.hive.Bees.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.Bee;
      reader.readMessage(value,proto.hive.Bee.deserializeBinaryFromReader);
      msg.addBees(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatusmessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Bees.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Bees.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Bees} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Bees.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.hive.Bee.serializeBinaryToWriter
    );
  }
  f = message.getStatusmessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated Bee Bees = 1;
 * @return {!Array<!proto.hive.Bee>}
 */
proto.hive.Bees.prototype.getBeesList = function() {
  return /** @type{!Array<!proto.hive.Bee>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.hive.Bee, 1));
};


/**
 * @param {!Array<!proto.hive.Bee>} value
 * @return {!proto.hive.Bees} returns this
*/
proto.hive.Bees.prototype.setBeesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.hive.Bee=} opt_value
 * @param {number=} opt_index
 * @return {!proto.hive.Bee}
 */
proto.hive.Bees.prototype.addBees = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.hive.Bee, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hive.Bees} returns this
 */
proto.hive.Bees.prototype.clearBeesList = function() {
  return this.setBeesList([]);
};


/**
 * optional string StatusMessage = 2;
 * @return {string}
 */
proto.hive.Bees.prototype.getStatusmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Bees} returns this
 */
proto.hive.Bees.prototype.setStatusmessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.BeeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.BeeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.BeeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.BeeReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && github_com_benka$me_cell$user_protobuf_user_pb.Token.toObject(includeInstance, f),
    beename: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.BeeReq}
 */
proto.hive.BeeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.BeeReq;
  return proto.hive.BeeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.BeeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.BeeReq}
 */
proto.hive.BeeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_benka$me_cell$user_protobuf_user_pb.Token;
      reader.readMessage(value,github_com_benka$me_cell$user_protobuf_user_pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBeename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.BeeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.BeeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.BeeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.BeeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_benka$me_cell$user_protobuf_user_pb.Token.serializeBinaryToWriter
    );
  }
  f = message.getBeename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional user.Token Token = 1;
 * @return {?proto.user.Token}
 */
proto.hive.BeeReq.prototype.getToken = function() {
  return /** @type{?proto.user.Token} */ (
    jspb.Message.getWrapperField(this, github_com_benka$me_cell$user_protobuf_user_pb.Token, 1));
};


/**
 * @param {?proto.user.Token|undefined} value
 * @return {!proto.hive.BeeReq} returns this
*/
proto.hive.BeeReq.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.BeeReq} returns this
 */
proto.hive.BeeReq.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.BeeReq.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string BeeName = 2;
 * @return {string}
 */
proto.hive.BeeReq.prototype.getBeename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.BeeReq} returns this
 */
proto.hive.BeeReq.prototype.setBeename = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hive.BeesReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.BeesReq.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.BeesReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.BeesReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.BeesReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && github_com_benka$me_cell$user_protobuf_user_pb.Token.toObject(includeInstance, f),
    beenamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.BeesReq}
 */
proto.hive.BeesReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.BeesReq;
  return proto.hive.BeesReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.BeesReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.BeesReq}
 */
proto.hive.BeesReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new github_com_benka$me_cell$user_protobuf_user_pb.Token;
      reader.readMessage(value,github_com_benka$me_cell$user_protobuf_user_pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addBeenames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.BeesReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.BeesReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.BeesReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.BeesReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      github_com_benka$me_cell$user_protobuf_user_pb.Token.serializeBinaryToWriter
    );
  }
  f = message.getBeenamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional user.Token Token = 1;
 * @return {?proto.user.Token}
 */
proto.hive.BeesReq.prototype.getToken = function() {
  return /** @type{?proto.user.Token} */ (
    jspb.Message.getWrapperField(this, github_com_benka$me_cell$user_protobuf_user_pb.Token, 1));
};


/**
 * @param {?proto.user.Token|undefined} value
 * @return {!proto.hive.BeesReq} returns this
*/
proto.hive.BeesReq.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.BeesReq} returns this
 */
proto.hive.BeesReq.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.BeesReq.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string BeeNames = 2;
 * @return {!Array<string>}
 */
proto.hive.BeesReq.prototype.getBeenamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.hive.BeesReq} returns this
 */
proto.hive.BeesReq.prototype.setBeenamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.hive.BeesReq} returns this
 */
proto.hive.BeesReq.prototype.addBeenames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hive.BeesReq} returns this
 */
proto.hive.BeesReq.prototype.clearBeenamesList = function() {
  return this.setBeenamesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Dep.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Dep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Dep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Dep.toObject = function(includeInstance, msg) {
  var f, obj = {
    port: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dev: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prod: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Dep}
 */
proto.hive.Dep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Dep;
  return proto.hive.Dep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Dep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Dep}
 */
proto.hive.Dep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDev(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Dep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Dep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Dep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Dep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDev();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProd();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 Port = 1;
 * @return {number}
 */
proto.hive.Dep.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.hive.Dep} returns this
 */
proto.hive.Dep.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string Dev = 2;
 * @return {string}
 */
proto.hive.Dep.prototype.getDev = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Dep} returns this
 */
proto.hive.Dep.prototype.setDev = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Prod = 3;
 * @return {string}
 */
proto.hive.Dep.prototype.getProd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Dep} returns this
 */
proto.hive.Dep.prototype.setProd = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Hive.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Hive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Hive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Hive.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pkgname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    pkgnamecamel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    repo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    author: jspb.Message.getFieldWithDefault(msg, 5, ""),
    pb_public: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    depsMap: (f = msg.getDepsMap()) ? f.toObject(includeInstance, proto.hive.Dep.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Hive}
 */
proto.hive.Hive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Hive;
  return proto.hive.Hive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Hive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Hive}
 */
proto.hive.Hive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgnamecamel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthor(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPublic(value);
      break;
    case 9:
      var value = msg.getDepsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.hive.Dep.deserializeBinaryFromReader, "", new proto.hive.Dep());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Hive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Hive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Hive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Hive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPkgname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPkgnamecamel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRepo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAuthor();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPublic();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getDepsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.hive.Dep.serializeBinaryToWriter);
  }
};


/**
 * optional string Name = 1;
 * @return {string}
 */
proto.hive.Hive.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string PkgName = 2;
 * @return {string}
 */
proto.hive.Hive.prototype.getPkgname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setPkgname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string PkgNameCamel = 3;
 * @return {string}
 */
proto.hive.Hive.prototype.getPkgnamecamel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setPkgnamecamel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Repo = 4;
 * @return {string}
 */
proto.hive.Hive.prototype.getRepo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setRepo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Author = 5;
 * @return {string}
 */
proto.hive.Hive.prototype.getAuthor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setAuthor = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool Public = 8;
 * @return {boolean}
 */
proto.hive.Hive.prototype.getPublic = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.setPublic = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * map<string, Dep> Deps = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.hive.Dep>}
 */
proto.hive.Hive.prototype.getDepsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.hive.Dep>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      proto.hive.Dep));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.hive.Hive} returns this
 */
proto.hive.Hive.prototype.clearDepsMap = function() {
  this.getDepsMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Languages.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Languages.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Languages} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Languages.toObject = function(includeInstance, msg) {
  var f, obj = {
    go: (f = msg.getGo()) && proto.hive.Go.toObject(includeInstance, f),
    javascript: (f = msg.getJavascript()) && proto.hive.Javascript.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Languages}
 */
proto.hive.Languages.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Languages;
  return proto.hive.Languages.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Languages} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Languages}
 */
proto.hive.Languages.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.Go;
      reader.readMessage(value,proto.hive.Go.deserializeBinaryFromReader);
      msg.setGo(value);
      break;
    case 2:
      var value = new proto.hive.Javascript;
      reader.readMessage(value,proto.hive.Javascript.deserializeBinaryFromReader);
      msg.setJavascript(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Languages.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Languages.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Languages} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Languages.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.Go.serializeBinaryToWriter
    );
  }
  f = message.getJavascript();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.hive.Javascript.serializeBinaryToWriter
    );
  }
};


/**
 * optional Go Go = 1;
 * @return {?proto.hive.Go}
 */
proto.hive.Languages.prototype.getGo = function() {
  return /** @type{?proto.hive.Go} */ (
    jspb.Message.getWrapperField(this, proto.hive.Go, 1));
};


/**
 * @param {?proto.hive.Go|undefined} value
 * @return {!proto.hive.Languages} returns this
*/
proto.hive.Languages.prototype.setGo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Languages} returns this
 */
proto.hive.Languages.prototype.clearGo = function() {
  return this.setGo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Languages.prototype.hasGo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Javascript Javascript = 2;
 * @return {?proto.hive.Javascript}
 */
proto.hive.Languages.prototype.getJavascript = function() {
  return /** @type{?proto.hive.Javascript} */ (
    jspb.Message.getWrapperField(this, proto.hive.Javascript, 2));
};


/**
 * @param {?proto.hive.Javascript|undefined} value
 * @return {!proto.hive.Languages} returns this
*/
proto.hive.Languages.prototype.setJavascript = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Languages} returns this
 */
proto.hive.Languages.prototype.clearJavascript = function() {
  return this.setJavascript(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Languages.prototype.hasJavascript = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.hive.LanguageSetup.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.LanguageSetup.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.LanguageSetup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.LanguageSetup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.LanguageSetup.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    repo: jspb.Message.getFieldWithDefault(msg, 2, ""),
    filesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    pkgname: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.LanguageSetup}
 */
proto.hive.LanguageSetup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.LanguageSetup;
  return proto.hive.LanguageSetup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.LanguageSetup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.LanguageSetup}
 */
proto.hive.LanguageSetup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFiles(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPkgname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.LanguageSetup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.LanguageSetup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.LanguageSetup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.LanguageSetup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getRepo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFilesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getPkgname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bool Active = 1;
 * @return {boolean}
 */
proto.hive.LanguageSetup.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string Repo = 2;
 * @return {string}
 */
proto.hive.LanguageSetup.prototype.getRepo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.setRepo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string Files = 3;
 * @return {!Array<string>}
 */
proto.hive.LanguageSetup.prototype.getFilesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.setFilesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.addFiles = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.clearFilesList = function() {
  return this.setFilesList([]);
};


/**
 * optional string PkgName = 4;
 * @return {string}
 */
proto.hive.LanguageSetup.prototype.getPkgname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.LanguageSetup} returns this
 */
proto.hive.LanguageSetup.prototype.setPkgname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Go.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Go.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Go} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Go.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Go}
 */
proto.hive.Go.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Go;
  return proto.hive.Go.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Go} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Go}
 */
proto.hive.Go.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Go.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Go.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Go} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Go.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Go.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Go} returns this
*/
proto.hive.Go.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Go} returns this
 */
proto.hive.Go.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Go.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Javascript.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Javascript.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Javascript} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Javascript.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Javascript}
 */
proto.hive.Javascript.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Javascript;
  return proto.hive.Javascript.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Javascript} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Javascript}
 */
proto.hive.Javascript.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Javascript.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Javascript.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Javascript} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Javascript.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Javascript.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Javascript} returns this
*/
proto.hive.Javascript.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Javascript} returns this
 */
proto.hive.Javascript.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Javascript.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Python.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Python.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Python} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Python.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Python}
 */
proto.hive.Python.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Python;
  return proto.hive.Python.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Python} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Python}
 */
proto.hive.Python.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Python.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Python.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Python} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Python.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Python.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Python} returns this
*/
proto.hive.Python.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Python} returns this
 */
proto.hive.Python.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Python.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Java.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Java.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Java} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Java.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Java}
 */
proto.hive.Java.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Java;
  return proto.hive.Java.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Java} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Java}
 */
proto.hive.Java.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Java.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Java.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Java} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Java.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Java.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Java} returns this
*/
proto.hive.Java.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Java} returns this
 */
proto.hive.Java.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Java.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.CPP.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.CPP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.CPP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.CPP.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.CPP}
 */
proto.hive.CPP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.CPP;
  return proto.hive.CPP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.CPP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.CPP}
 */
proto.hive.CPP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.CPP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.CPP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.CPP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.CPP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.CPP.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.CPP} returns this
*/
proto.hive.CPP.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.CPP} returns this
 */
proto.hive.CPP.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.CPP.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.CSharp.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.CSharp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.CSharp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.CSharp.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.CSharp}
 */
proto.hive.CSharp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.CSharp;
  return proto.hive.CSharp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.CSharp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.CSharp}
 */
proto.hive.CSharp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.CSharp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.CSharp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.CSharp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.CSharp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.CSharp.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.CSharp} returns this
*/
proto.hive.CSharp.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.CSharp} returns this
 */
proto.hive.CSharp.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.CSharp.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.ObjectiveC.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.ObjectiveC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.ObjectiveC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.ObjectiveC.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.ObjectiveC}
 */
proto.hive.ObjectiveC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.ObjectiveC;
  return proto.hive.ObjectiveC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.ObjectiveC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.ObjectiveC}
 */
proto.hive.ObjectiveC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.ObjectiveC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.ObjectiveC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.ObjectiveC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.ObjectiveC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.ObjectiveC.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.ObjectiveC} returns this
*/
proto.hive.ObjectiveC.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.ObjectiveC} returns this
 */
proto.hive.ObjectiveC.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.ObjectiveC.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Ruby.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Ruby.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Ruby} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Ruby.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Ruby}
 */
proto.hive.Ruby.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Ruby;
  return proto.hive.Ruby.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Ruby} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Ruby}
 */
proto.hive.Ruby.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Ruby.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Ruby.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Ruby} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Ruby.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Ruby.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Ruby} returns this
*/
proto.hive.Ruby.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Ruby} returns this
 */
proto.hive.Ruby.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Ruby.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.Dart.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.Dart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.Dart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Dart.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.Dart}
 */
proto.hive.Dart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.Dart;
  return proto.hive.Dart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.Dart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.Dart}
 */
proto.hive.Dart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.Dart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.Dart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.Dart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.Dart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.Dart.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.Dart} returns this
*/
proto.hive.Dart.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.Dart} returns this
 */
proto.hive.Dart.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.Dart.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.PHP.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.PHP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.PHP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PHP.toObject = function(includeInstance, msg) {
  var f, obj = {
    setup: (f = msg.getSetup()) && proto.hive.LanguageSetup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.PHP}
 */
proto.hive.PHP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.PHP;
  return proto.hive.PHP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.PHP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.PHP}
 */
proto.hive.PHP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.LanguageSetup;
      reader.readMessage(value,proto.hive.LanguageSetup.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.PHP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.PHP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.PHP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PHP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.LanguageSetup.serializeBinaryToWriter
    );
  }
};


/**
 * optional LanguageSetup Setup = 1;
 * @return {?proto.hive.LanguageSetup}
 */
proto.hive.PHP.prototype.getSetup = function() {
  return /** @type{?proto.hive.LanguageSetup} */ (
    jspb.Message.getWrapperField(this, proto.hive.LanguageSetup, 1));
};


/**
 * @param {?proto.hive.LanguageSetup|undefined} value
 * @return {!proto.hive.PHP} returns this
*/
proto.hive.PHP.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.PHP} returns this
 */
proto.hive.PHP.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.PHP.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.PushBee.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.PushBee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.PushBee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushBee.toObject = function(includeInstance, msg) {
  var f, obj = {
    bee: (f = msg.getBee()) && proto.hive.Bee.toObject(includeInstance, f),
    token: (f = msg.getToken()) && github_com_benka$me_cell$user_protobuf_user_pb.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.PushBee}
 */
proto.hive.PushBee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.PushBee;
  return proto.hive.PushBee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.PushBee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.PushBee}
 */
proto.hive.PushBee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.Bee;
      reader.readMessage(value,proto.hive.Bee.deserializeBinaryFromReader);
      msg.setBee(value);
      break;
    case 2:
      var value = new github_com_benka$me_cell$user_protobuf_user_pb.Token;
      reader.readMessage(value,github_com_benka$me_cell$user_protobuf_user_pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.PushBee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.PushBee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.PushBee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushBee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBee();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.Bee.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_benka$me_cell$user_protobuf_user_pb.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional Bee Bee = 1;
 * @return {?proto.hive.Bee}
 */
proto.hive.PushBee.prototype.getBee = function() {
  return /** @type{?proto.hive.Bee} */ (
    jspb.Message.getWrapperField(this, proto.hive.Bee, 1));
};


/**
 * @param {?proto.hive.Bee|undefined} value
 * @return {!proto.hive.PushBee} returns this
*/
proto.hive.PushBee.prototype.setBee = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.PushBee} returns this
 */
proto.hive.PushBee.prototype.clearBee = function() {
  return this.setBee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.PushBee.prototype.hasBee = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional user.Token Token = 2;
 * @return {?proto.user.Token}
 */
proto.hive.PushBee.prototype.getToken = function() {
  return /** @type{?proto.user.Token} */ (
    jspb.Message.getWrapperField(this, github_com_benka$me_cell$user_protobuf_user_pb.Token, 2));
};


/**
 * @param {?proto.user.Token|undefined} value
 * @return {!proto.hive.PushBee} returns this
*/
proto.hive.PushBee.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.PushBee} returns this
 */
proto.hive.PushBee.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.PushBee.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.PushHive.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.PushHive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.PushHive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushHive.toObject = function(includeInstance, msg) {
  var f, obj = {
    hive: (f = msg.getHive()) && proto.hive.Hive.toObject(includeInstance, f),
    token: (f = msg.getToken()) && github_com_benka$me_cell$user_protobuf_user_pb.Token.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.PushHive}
 */
proto.hive.PushHive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.PushHive;
  return proto.hive.PushHive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.PushHive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.PushHive}
 */
proto.hive.PushHive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.hive.Hive;
      reader.readMessage(value,proto.hive.Hive.deserializeBinaryFromReader);
      msg.setHive(value);
      break;
    case 2:
      var value = new github_com_benka$me_cell$user_protobuf_user_pb.Token;
      reader.readMessage(value,github_com_benka$me_cell$user_protobuf_user_pb.Token.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.PushHive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.PushHive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.PushHive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushHive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHive();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.hive.Hive.serializeBinaryToWriter
    );
  }
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      github_com_benka$me_cell$user_protobuf_user_pb.Token.serializeBinaryToWriter
    );
  }
};


/**
 * optional Hive Hive = 1;
 * @return {?proto.hive.Hive}
 */
proto.hive.PushHive.prototype.getHive = function() {
  return /** @type{?proto.hive.Hive} */ (
    jspb.Message.getWrapperField(this, proto.hive.Hive, 1));
};


/**
 * @param {?proto.hive.Hive|undefined} value
 * @return {!proto.hive.PushHive} returns this
*/
proto.hive.PushHive.prototype.setHive = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.PushHive} returns this
 */
proto.hive.PushHive.prototype.clearHive = function() {
  return this.setHive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.PushHive.prototype.hasHive = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional user.Token Token = 2;
 * @return {?proto.user.Token}
 */
proto.hive.PushHive.prototype.getToken = function() {
  return /** @type{?proto.user.Token} */ (
    jspb.Message.getWrapperField(this, github_com_benka$me_cell$user_protobuf_user_pb.Token, 2));
};


/**
 * @param {?proto.user.Token|undefined} value
 * @return {!proto.hive.PushHive} returns this
*/
proto.hive.PushHive.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.hive.PushHive} returns this
 */
proto.hive.PushHive.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.hive.PushHive.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.PushBeeRes.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.PushBeeRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.PushBeeRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushBeeRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.PushBeeRes}
 */
proto.hive.PushBeeRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.PushBeeRes;
  return proto.hive.PushBeeRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.PushBeeRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.PushBeeRes}
 */
proto.hive.PushBeeRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.PushBeeRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.PushBeeRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.PushBeeRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushBeeRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.hive.PushBeeRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.PushBeeRes} returns this
 */
proto.hive.PushBeeRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.hive.PushHiveRes.prototype.toObject = function(opt_includeInstance) {
  return proto.hive.PushHiveRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.hive.PushHiveRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushHiveRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.hive.PushHiveRes}
 */
proto.hive.PushHiveRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.hive.PushHiveRes;
  return proto.hive.PushHiveRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.hive.PushHiveRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.hive.PushHiveRes}
 */
proto.hive.PushHiveRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.hive.PushHiveRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.hive.PushHiveRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.hive.PushHiveRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.hive.PushHiveRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Id = 1;
 * @return {string}
 */
proto.hive.PushHiveRes.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.hive.PushHiveRes} returns this
 */
proto.hive.PushHiveRes.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.hive.DevLang = {
  GO_: 0,
  JAVASCRIPT_: 1,
  PYTHON_: 2,
  JAVA_: 3,
  CPP_: 4,
  CSHARP_: 5,
  OBJECTIVEC_: 6,
  RUBY_: 7,
  DART_: 8,
  PHP_: 9
};

goog.object.extend(exports, proto.hive);
